{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport seaborn as sns\n","metadata":{"execution":{"iopub.status.busy":"2023-03-21T11:55:12.944755Z","iopub.execute_input":"2023-03-21T11:55:12.945265Z","iopub.status.idle":"2023-03-21T11:55:13.672860Z","shell.execute_reply.started":"2023-03-21T11:55:12.945226Z","shell.execute_reply":"2023-03-21T11:55:13.671540Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"**VGG**","metadata":{}},{"cell_type":"code","source":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras import layers\nfrom keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import EarlyStopping\n","metadata":{"execution":{"iopub.status.busy":"2023-03-21T11:55:29.050085Z","iopub.execute_input":"2023-03-21T11:55:29.050590Z","iopub.status.idle":"2023-03-21T11:55:37.447382Z","shell.execute_reply.started":"2023-03-21T11:55:29.050550Z","shell.execute_reply":"2023-03-21T11:55:37.445832Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"TRAIN_DIR = '/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/train'\nTEST_DIR='/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/test'\nVAL_DIR='/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/val'\nIMG_SIZE = (150,150)\n\ntrain_datagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.1,\n    brightness_range=[0.5, 1.5],\n    horizontal_flip=True,\n    vertical_flip=True,\n    preprocessing_function=preprocess_input\n)\n\ntest_datagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input\n)\n\n\ntrain_generator = train_datagen.flow_from_directory(\n    TRAIN_DIR,\n    color_mode='rgb',\n    target_size=IMG_SIZE,\n    batch_size=32,\n    class_mode='binary',\n    seed=123\n)\n\n\nvalidation_generator = test_datagen.flow_from_directory(\n    VAL_DIR,\n    color_mode='rgb',\n    target_size=IMG_SIZE,\n    batch_size=16,\n    class_mode='binary',\n    seed=123\n)\n\ntest_generator = test_datagen.flow_from_directory(\n    TEST_DIR,\n    color_mode='rgb',\n    target_size=IMG_SIZE,\n    batch_size=16,\n    class_mode='binary',\n    seed=123\n)","metadata":{"execution":{"iopub.status.busy":"2023-03-21T11:55:37.449850Z","iopub.execute_input":"2023-03-21T11:55:37.450845Z","iopub.status.idle":"2023-03-21T11:55:42.075756Z","shell.execute_reply.started":"2023-03-21T11:55:37.450797Z","shell.execute_reply":"2023-03-21T11:55:42.074606Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Found 6326 images belonging to 4 classes.\nFound 38 images belonging to 4 classes.\nFound 771 images belonging to 4 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"# load base model\nfrom keras.applications.vgg16 import VGG16\n\nvgg16_weight_path = '../input/keras-pretrained-models/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\nbase_model = VGG16(\n    weights=vgg16_weight_path,\n    include_top=False, \n    input_shape=IMG_SIZE + (3,),\n)","metadata":{"execution":{"iopub.status.busy":"2023-03-21T11:55:42.076940Z","iopub.execute_input":"2023-03-21T11:55:42.077934Z","iopub.status.idle":"2023-03-21T11:55:43.523016Z","shell.execute_reply.started":"2023-03-21T11:55:42.077896Z","shell.execute_reply":"2023-03-21T11:55:43.521603Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"NUM_CLASSES = 4\n\nmodel = Sequential()\nmodel.add(base_model)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(4, activation='softmax'))\n\n\nmodel.layers[0].trainable = False\n\nmodel.compile(\n    loss='sparse_categorical_crossentropy',\n    optimizer=RMSprop(lr=1e-4),\n    metrics='accuracy'\n)\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2023-03-21T11:55:43.525735Z","iopub.execute_input":"2023-03-21T11:55:43.526285Z","iopub.status.idle":"2023-03-21T11:55:43.645174Z","shell.execute_reply.started":"2023-03-21T11:55:43.526234Z","shell.execute_reply":"2023-03-21T11:55:43.644229Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Model: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nvgg16 (Functional)           (None, 4, 4, 512)         14714688  \n_________________________________________________________________\nflatten (Flatten)            (None, 8192)              0         \n_________________________________________________________________\ndropout (Dropout)            (None, 8192)              0         \n_________________________________________________________________\ndense (Dense)                (None, 4)                 32772     \n=================================================================\nTotal params: 14,747,460\nTrainable params: 32,772\nNon-trainable params: 14,714,688\n_________________________________________________________________\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/keras/optimizer_v2/optimizer_v2.py:356: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n","output_type":"stream"}]},{"cell_type":"code","source":"EPOCHS = 10\nes = EarlyStopping(\n    monitor='val_acc', \n    mode='max',\n    patience=6\n)\n\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch=100,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=50,\n)","metadata":{"execution":{"iopub.status.busy":"2023-03-21T11:55:46.768767Z","iopub.execute_input":"2023-03-21T11:55:46.769194Z","iopub.status.idle":"2023-03-21T13:05:43.094097Z","shell.execute_reply.started":"2023-03-21T11:55:46.769161Z","shell.execute_reply":"2023-03-21T13:05:43.092872Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/keras/engine/training.py:1972: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n  warnings.warn('`Model.fit_generator` is deprecated and '\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/10\n100/100 [==============================] - 418s 4s/step - loss: 7.6189 - accuracy: 0.5292 - val_loss: 5.3590 - val_accuracy: 0.5000\nEpoch 2/10\n100/100 [==============================] - 405s 4s/step - loss: 4.1606 - accuracy: 0.7034\nEpoch 3/10\n100/100 [==============================] - 393s 4s/step - loss: 3.0305 - accuracy: 0.7697\nEpoch 4/10\n100/100 [==============================] - 384s 4s/step - loss: 2.5950 - accuracy: 0.8063\nEpoch 5/10\n100/100 [==============================] - 398s 4s/step - loss: 2.2425 - accuracy: 0.8216\nEpoch 6/10\n100/100 [==============================] - 380s 4s/step - loss: 2.1102 - accuracy: 0.8285\nEpoch 7/10\n100/100 [==============================] - 383s 4s/step - loss: 1.8744 - accuracy: 0.8522\nEpoch 8/10\n100/100 [==============================] - 398s 4s/step - loss: 1.9091 - accuracy: 0.8541\nEpoch 9/10\n100/100 [==============================] - 381s 4s/step - loss: 1.7032 - accuracy: 0.8553\nEpoch 10/10\n100/100 [==============================] - 386s 4s/step - loss: 1.3589 - accuracy: 0.8838\n","output_type":"stream"}]},{"cell_type":"code","source":"model.predict(test_generator)","metadata":{"execution":{"iopub.status.busy":"2023-03-21T13:52:54.152920Z","iopub.execute_input":"2023-03-21T13:52:54.153406Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print( model.evaluate(test_generator))\n","metadata":{"execution":{"iopub.status.busy":"2023-03-21T13:05:43.096356Z","iopub.execute_input":"2023-03-21T13:05:43.096758Z","iopub.status.idle":"2023-03-21T13:07:19.869617Z","shell.execute_reply.started":"2023-03-21T13:05:43.096724Z","shell.execute_reply":"2023-03-21T13:07:19.868316Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"49/49 [==============================] - 96s 2s/step - loss: 2.1564 - accuracy: 0.8560\nLoss of the model is -  [2.1563968658447266, 0.8560311198234558]\n","output_type":"stream"}]},{"cell_type":"code","source":"model","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**RESNET**","metadata":{}},{"cell_type":"code","source":"import tensorflow\nResnet_model=tensorflow.keras.applications.resnet.ResNet101(\n    include_top=True,\n    weights='imagenet',\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000)","metadata":{"execution":{"iopub.status.busy":"2023-02-10T09:34:00.414188Z","iopub.execute_input":"2023-02-10T09:34:00.414705Z","iopub.status.idle":"2023-02-10T09:34:05.055707Z","shell.execute_reply.started":"2023-02-10T09:34:00.414651Z","shell.execute_reply":"2023-02-10T09:34:05.054227Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet101_weights_tf_dim_ordering_tf_kernels.h5\n179650560/179648224 [==============================] - 1s 0us/step\n179658752/179648224 [==============================] - 1s 0us/step\n","output_type":"stream"}]},{"cell_type":"code","source":"NUM_CLASSES = 4\n\nResnet = Sequential()\nResnet.add(Resnet_model)\nResnet.add(layers.Dense(4, activation='softmax'))\n\n\nResnet.layers[0].trainable = False\n\nResnet.compile(\n    loss='sparse_categorical_crossentropy',\n    optimizer=RMSprop(lr=1e-4),\n    metrics='accuracy'\n)\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2023-02-10T09:37:24.139711Z","iopub.execute_input":"2023-02-10T09:37:24.140117Z","iopub.status.idle":"2023-02-10T09:37:25.152900Z","shell.execute_reply.started":"2023-02-10T09:37:24.140087Z","shell.execute_reply":"2023-02-10T09:37:25.151379Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Model: \"sequential_4\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nresnet101 (Functional)       (None, 1000)              44707176  \n_________________________________________________________________\ndense_5 (Dense)              (None, 4)                 4004      \n=================================================================\nTotal params: 44,711,180\nTrainable params: 4,004\nNon-trainable params: 44,707,176\n_________________________________________________________________\n","output_type":"stream"}]}]}